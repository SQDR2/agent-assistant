syntax = "proto3";

package agentassistproto;

option go_package = "github.com/yangjuncode/agentassistant/agentassistproto";

// TextContent represents text provided to or from an LLM.
// It must have Type set to "text".
message TextContent {
  string type = 1; // Must be "text"
  string text = 2; // The text content
}

// ImageContent represents an image provided to or from an LLM.
// It must have Type set to "image".
message ImageContent {
  string type = 1;      // Must be "image"
  string data = 2;      // Base64-encoded image data
  string mime_type = 3; // MIME type of the image
}

// AudioContent represents audio data provided to or from an LLM.
// It must have Type set to "audio".
message AudioContent {
  string type = 1;      // Must be "audio"
  string data = 2;      // Base64-encoded audio data
  string mime_type = 3; // MIME type of the audio
}

// EmbeddedResource represents a resource embedded into a prompt or tool call
// result. It must have Type set to "embedded_resource".
message EmbeddedResource {
  string type = 1;      // Must be "embedded_resource"
  string uri = 2;       // URI of the embedded resource
  string mime_type = 3; // MIME type of the resource
  bytes data = 4;       // Optional: The actual resource data
}

message McpResultContent {
   //content type
   // 1: text
   // 2: image
   // 3: audio
   // 4: embedded resource
   int32 type = 1;
  // text
  TextContent text = 2;
  // image
  ImageContent image = 3;
  // audio
  AudioContent audio = 4;
  // embedded resource
  EmbeddedResource embedded_resource = 5;
}

message MsgEmpty {
  
}

message McpAskQuestionRequest {
  // current project directory
  string ProjectDirectory = 1;
  // ai agent's question
  string Question = 2;
  // timeout in seconds, default is 600s
  int32 Timeout = 3;
}

message AskQuestionRequest {
  // request id
  string ID = 1;
  // user token
  string UserToken = 2;
  // ai agent's question
  McpAskQuestionRequest Request = 3;
}

message AskQuestionResponse {
  // request id
  string ID = 1;
  bool IsError = 2;
  map<string, string> Meta = 3;
  repeated McpResultContent contents = 4;
}

message McpTaskFinishRequest {
  // current project directory
  string ProjectDirectory = 1;
  // ai agent's summary
  string Summary = 2;
  // timeout in seconds, default is 600s
  int32 Timeout = 3;
}

message TaskFinishRequest {
  // request id
  string ID = 1;
  // user token
  string UserToken = 2;
  // ai agent's summary
  McpTaskFinishRequest Request = 3;
}

message TaskFinishResponse {
  // request id
  string ID = 1;
  bool IsError = 2;
  map<string, string> Meta = 3;
  repeated McpResultContent contents = 4;
}

message CheckMessageValidityRequest {
  // list of request IDs to check
  repeated string request_ids = 1;
}

message CheckMessageValidityResponse {
  // map of request ID to validity status
  map<string, bool> validity = 1;
}

message WebsocketMessage {
  // WebsocketMessage cmd
  // AskQuestion: mcp ask_question
  // TaskFinish: mcp task_finish
  // AskQuestionReply: user ask_question reply
  // TaskFinishReply: user task_finish reply
  // UserLogin: user login, str param is user token
  // AskQuestionReplyNotification: notification of an AskQuestionReply
  // TaskFinishReplyNotification: notification of a TaskFinishReply
  // CheckMessageValidity: check if messages are still valid
  string Cmd = 1;

  //ask question
  AskQuestionRequest AskQuestionRequest = 2;

  //task finish
  TaskFinishRequest TaskFinishRequest = 3;

  // ask question reply
  AskQuestionResponse AskQuestionResponse = 4;

  // task finish reply
  TaskFinishResponse TaskFinishResponse = 5;

  // check message validity
  CheckMessageValidityRequest CheckMessageValidityRequest = 13;

  // check message validity response
  CheckMessageValidityResponse CheckMessageValidityResponse = 14;

  //str param
  string StrParam = 12;
}

service SrvAgentAssist {
  rpc AskQuestion(AskQuestionRequest) returns (AskQuestionResponse);
  rpc TaskFinish(TaskFinishRequest) returns (TaskFinishResponse);
}

// WebsocketMessage defines the message structure for WebSocket communication
